<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<!--API Documentation URL- http://www.bugzilla.org/docs/tip/en/html/api/Bugzilla/WebService/Bug.html#update -->
<template name="updateBug" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="bugId" description="ID of the bug."/>
    <parameter name="ids" description="Array of the ids or aliases of the bugs."/>
    <parameter name="minorUpdate"
               description="If set to true, this is considered a minor update and no mail is sent to users who do not want minor update emails."/>
    <parameter name="alias"
               description="Aliases of a bug that can be used instead of a bug number."/>
    <parameter name="assignedTo" description="The full login name of the user to assigned bug."/>
    <parameter name="blocks" description="specify the bugs that this bug blocks, respectively."/>
    <parameter name="dependsOn" description="Specify the bugs that is depends on, respectively."/>
    <parameter name="cc" description="The users on the cc list."/>
    <parameter name="isCcAccessible"
               description="Whether or not users in the CC list are allowed to access the bug"/>
    <parameter name="comment" description="A comment on the change."/>
    <parameter name="isCommentPrivate"
               description="This is how update the privacy of comments that are already on a bug."/>
    <parameter name="component" description="The Component the bug is in."/>
    <parameter name="deadline"
               description="The Deadline field a date specifying when the bug must be completed by, in the format YYYY-MM-DD."/>
    <parameter name="dupeOf" description="The bug that this bug is a duplicate of."/>
    <parameter name="estimatedTime"
               description="The total estimate of time required to fix the bug, in hours."/>
    <parameter name="flags" description="An array of hashes with changes to the flags."/>
    <parameter name="groups" description="The groups a bug is in."/>
    <parameter name="keywords" description="Keywords on the bug."/>
    <parameter name="opSys" description="The Operating System field on the bug."/>
    <parameter name="platform" description="The Platform or Hardware field on the bug."/>
    <parameter name="priority" description="The Priority field on the bug."/>
    <parameter name="product" description="The name of the product that the bug is in."/>
    <parameter name="qaContact" description="The full login name of the bug's QA Contact."/>
    <parameter name="isCreatorAccessible"
               description="Whether or not the bug's reporter is allowed to access the bug."/>
    <parameter name="remainingTime" description="How much work time is remaining to fix the bug."/>
    <parameter name="resetAssignedTo"
               description="If true, the assigned_to field will be reset to the default for the component that the bug is in."/>
    <parameter name="resetQaContact"
               description="If true, the qa_contact field will be reset to the default for the component that the bug is in."/>
    <parameter name="resolution" description="The current resolution."/>
    <parameter name="seeAlso"
               description="The See Also field on a bug, specifying URLs to bugs in other bug trackers."/>
    <parameter name="severity" description="The Severity field of a bug."/>
    <parameter name="status" description="The status want to change the bug to."/>
    <parameter name="summary" description="The Summary field of the bug."/>
    <parameter name="targetMilestone" description="The bug's Target Milestone."/>
    <parameter name="url" description="The URL of the bug."/>
    <parameter name="version" description="The bug's Version."/>
    <parameter name="whiteboard" description="The Status Whiteboard field of a bug."/>
    <parameter name="workTime"
               description="The number of hours worked on this bug as part of this change. "/>
    <parameter name="customFields"
               description="An object of the custom fields with the custom field name and the value."/>
    <sequence>
        <property name="uri.var.bugId" expression="$func:bugId"/>
        <property name="uri.var.ids" expression="$func:ids"/>
        <property name="uri.var.minorUpdate" expression="$func:minorUpdate"/>
        <property name="uri.var.alias" expression="$func:alias"/>
        <property name="uri.var.assignedTo" expression="$func:assignedTo"/>
        <property name="uri.var.blocks" expression="$func:blocks"/>
        <property name="uri.var.dependsOn" expression="$func:dependsOn"/>
        <property name="uri.var.cc" expression="$func:cc"/>
        <property name="uri.var.isCcAccessible" expression="$func:isCcAccessible"/>
        <property name="uri.var.comment" expression="$func:comment"/>
        <property name="uri.var.isCommentPrivate" expression="$func:isCommentPrivate"/>
        <property name="uri.var.component" expression="$func:component"/>
        <property name="uri.var.deadline" expression="$func:deadline"/>
        <property name="uri.var.dupeOf" expression="$func:dupeOf"/>
        <property name="uri.var.estimatedTime" expression="$func:estimatedTime"/>
        <property name="uri.var.flags" expression="$func:flags"/>
        <property name="uri.var.groups" expression="$func:groups"/>
        <property name="uri.var.keywords" expression="$func:keywords"/>
        <property name="uri.var.opSys" expression="$func:opSys"/>
        <property name="uri.var.platform" expression="$func:platform"/>
        <property name="uri.var.priority" expression="$func:priority"/>
        <property name="uri.var.product" expression="$func:product"/>
        <property name="uri.var.qaContact" expression="$func:qaContact"/>
        <property name="uri.var.isCreatorAccessible" expression="$func:isCreatorAccessible"/>
        <property name="uri.var.remainingTime" expression="$func:remainingTime"/>
        <property name="uri.var.resetAssignedTo" expression="$func:resetAssignedTo"/>
        <property name="uri.var.resetQaContact" expression="$func:resetQaContact"/>
        <property name="uri.var.resolution" expression="$func:resolution"/>
        <property name="uri.var.seeAlso" expression="$func:seeAlso"/>
        <property name="uri.var.severity" expression="$func:severity"/>
        <property name="uri.var.status" expression="$func:status"/>
        <property name="uri.var.summary" expression="$func:summary"/>
        <property name="uri.var.targetMilestone" expression="$func:targetMilestone"/>
        <property name="uri.var.url" expression="$func:url"/>
        <property name="uri.var.version" expression="$func:version"/>
        <property name="uri.var.whiteboard" expression="$func:whiteboard"/>
        <property name="uri.var.workTime" expression="$func:workTime"/>
        <property name="uri.var.customFields" expression="$func:customFields"/>
        <script language="js">
            <![CDATA[
            payload = new Object();
            var ids=mc.getProperty('uri.var.ids');
            var minorUpdate=mc.getProperty('uri.var.minorUpdate');
            var alias=mc.getProperty('uri.var.alias');
            var assignedTo=mc.getProperty('uri.var.assignedTo');
            var blocks=mc.getProperty('uri.var.blocks');
            var dependsOn=mc.getProperty('uri.var.dependsOn');
            var cc=mc.getProperty('uri.var.cc');
            var isCcAccessible=mc.getProperty('uri.var.isCcAccessible');
            var comment=mc.getProperty('uri.var.comment');
            var isCommentPrivate=mc.getProperty('uri.var.isCommentPrivate');
            var component=mc.getProperty('uri.var.component');
            var deadline=mc.getProperty('uri.var.deadline');
            var dupeOf=mc.getProperty('uri.var.dupeOf');
            var estimatedTime=mc.getProperty('uri.var.estimatedTime');
            var flags=mc.getProperty('uri.var.flags');
            var groups=mc.getProperty('uri.var.groups');
            var keywords=mc.getProperty('uri.var.keywords');
            var opSys=mc.getProperty('uri.var.opSys');
            var platform=mc.getProperty('uri.var.platform');
            var priority=mc.getProperty('uri.var.priority');
            var product=mc.getProperty('uri.var.product');
            var qaContact=mc.getProperty('uri.var.qaContact');
            var isCreatorAccessible=mc.getProperty('uri.var.isCreatorAccessible');
            var remainingTime=mc.getProperty('uri.var.remainingTime');
            var resetAssignedTo=mc.getProperty('uri.var.resetAssignedTo');
            var resetQaContact=mc.getProperty('uri.var.resetQaContact');
            var resolution=mc.getProperty('uri.var.resolution');
            var seeAlso=mc.getProperty('uri.var.seeAlso');
            var severity=mc.getProperty('uri.var.severity');
            var status=mc.getProperty('uri.var.status');
            var summary=mc.getProperty('uri.var.summary');
            var targetMilestone=mc.getProperty('uri.var.targetMilestone');
            var url=mc.getProperty('uri.var.url');
            var version=mc.getProperty('uri.var.version');
            var whiteboard=mc.getProperty('uri.var.whiteboard');
            var workTime=mc.getProperty('uri.var.workTime');
            var customFields=mc.getProperty('uri.var.customFields');
            if(ids!=null && ids!=""){
               if(ids.charCodeAt(0) != '91' && ids.charCodeAt(ids.length-1) != '93'){
                  payload["ids"]=ids;
               }else{
                  payload["ids"]=eval("(" + ids + ")");
               } 
            }
            if(minorUpdate!=null && minorUpdate!=""){
               payload["minor_update"]=minorUpdate;
            }
            if(alias!=null && alias!=""){
               if(alias.charCodeAt(0) != '91' && alias.charCodeAt(alias.length-1) != '93'){
                  payload["alias"]=alias;
               }else{
                  payload["alias"]=eval("(" + alias + ")");
               } 
            }
            if(assignedTo!=null && assignedTo!=""){
               payload["assigned_to"]=assignedTo;
            }
            if(blocks!=null && blocks!=""){
               if(blocks.charCodeAt(0) != '91' && blocks.charCodeAt(blocks.length-1) != '93'){
                  payload["blocks"]=blocks;
               }else{
                  payload["blocks"]=eval("(" + blocks + ")");
               } 
            }
            if(dependsOn!=null && dependsOn!=""){
               if(dependsOn.charCodeAt(0) != '91' && dependsOn.charCodeAt(dependsOn.length-1) != '93'){
                  payload["depends_on"]=dependsOn;
               }else{
               } 
               payload["depends_on"]=dependsOn;
            }
            if(cc!=null && cc!=""){
               if(cc.charCodeAt(0) != '91' && cc.charCodeAt(cc.length-1) != '93'){
                  payload["cc"]=cc;
               }else{
                  payload["cc"]=eval("(" + cc + ")");
               } 
            }
            if(isCcAccessible!=null && isCcAccessible!=""){
               payload["is_cc_accessible"]=isCcAccessible;
            }
            if(comment!=null && comment!=""){
               payload["comment"]=comment;
            }
            if(isCommentPrivate!=null && isCommentPrivate!=""){
               payload["comment_is_private"]=isCommentPrivate;
            }
            if(component!=null && component!=""){
               payload["component"]=component;
            }
            if(deadline!=null && deadline!=""){
               payload["deadline"]=deadline;
            }
            if(dupeOf!=null && dupeOf!=""){
               payload["dupe_of"]=dupeOf;
            }
            if(estimatedTime!=null && estimatedTime!=""){
               payload["estimated_time"]=estimatedTime;
            }
            if(flags!=null && flags!=""){
            	payload["flags"]=eval("(" + flags + ")"); 
            }
            if(groups!=null && groups!=""){
               if(groups.charCodeAt(0) != '91' && groups.charCodeAt(groups.length-1) != '93'){
                  payload["groups"]=groups;
               }else{
                  payload["groups"]=eval("(" + groups + ")");
               } 
            }
            if(keywords!=null && keywords!=""){
               if(keywords.charCodeAt(0) != '91' && keywords.charCodeAt(keywords.length-1) != '93'){
                  payload["keywords"]=keywords;
               }else{
                  payload["keywords"]=eval("(" + keywords + ")");
               } 
            }
            if(opSys!=null && opSys!=""){
               payload["op_sys"]=opSys;
            }
            if(platform!=null && platform!=""){
               payload["platform"]=platform;
            }
            if(priority!=null && priority!=""){
               payload["priority"]=priority;
            }
            if(product!=null && product!=""){
               payload["product"]=product;
            }
            if(qaContact!=null && qaContact!=""){
               payload["qa_contact"]=qaContact;
            }
            if(isCreatorAccessible!=null && isCreatorAccessible!=""){
               payload["is_creator_accessible"]=isCreatorAccessible;
            }
            if(remainingTime!=null && remainingTime!=""){
               payload["remaining_time"]=remainingTime;
            }
            if(resetAssignedTo!=null && resetAssignedTo!=""){
               payload["reset_assigned_to"]=resetAssignedTo;
            }
            if(resetQaContact!=null && resetQaContact!=""){
               payload["reset_qa_contact"]=resetQaContact;
            }
            if(resolution!=null && resolution!=""){
               payload["resolution"]=resolution;
            }
            if(seeAlso!=null && seeAlso!=""){
               if(seeAlso.charCodeAt(0) != '91' && seeAlso.charCodeAt(seeAlso.length-1) != '93'){
                  payload["see_also"]=seeAlso;
               }
               else{
                  payload["see_also"]=eval("(" + seeAlso + ")");
               } 
            }
            if(severity!=null && severity!=""){
               payload["severity"]=severity;
            }
            if(status!=null && status!=""){
               payload["status"]=status;
            }
            if(summary!=null && summary!=""){
               payload["summary"]=summary;
            }
            if(targetMilestone!=null && targetMilestone!=""){
               payload["target_milestone"]=targetMilestone;
            }
            if(url!=null && url!=""){
               payload["url"]=url;
            }
            if(version!=null && version!=""){
               payload["version"]=version;
            }
            if(whiteboard!=null && whiteboard!=""){
               payload["whiteboard"]=whiteboard;
            }
            if(workTime!=null && workTime!=""){
               payload["work_time"]=workTime;
            }
            if(customFields!=null && customFields!=""){
               var customFieldsJsonObject=eval("(" + customFields + ")");
               for(var key in customFieldsJsonObject){
                  var value = customFieldsJsonObject[key];
                  payload[key]=value;
               }
            }
            mc.setPayloadJSON(payload);   
         ]]>
        </script>
        <property name="DISABLE_CHUNKING" value="true" scope="axis2"/>
        <call>
            <endpoint>
                <http method="put"
                      uri-template="{uri.var.apiUrl}/bug/{+uri.var.bugId}{+uri.var.apiKey}"/>
            </endpoint>
        </call>
        <!--Removing custom headers from the Response. -->
        <header name="X-frame-options" action="remove" scope="transport"/>
        <header name="X-xss-protection" action="remove" scope="transport"/>
        <header name="Etag" action="remove" scope="transport"/>
        <header name="X-content-type-options" action="remove" scope="transport"/>
        <header name="Access-control-allow-origin" action="remove" scope="transport"/>
        <header name="Access-control-allow-headers" action="remove" scope="transport"/>
    </sequence>
</template>