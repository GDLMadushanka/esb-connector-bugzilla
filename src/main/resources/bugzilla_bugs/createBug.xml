<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<!--API Documentation URL- https://www.bugzilla.org/docs/tip/en/html/api/Bugzilla/WebService/Bug.html#create -->
<template name="createBug" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="product"
               description="The name of the product the bug is being filed against."/>
    <parameter name="component" description="The name of a component in the product above."/>
    <parameter name="summary" description="A brief description of the bug being filed."/>
    <parameter name="version"
               description="A version of the product above; the version the bug was found in."/>
    <parameter name="description" description="The initial description for this bug."/>
    <parameter name="opSys" description="The operating system the bug was discovered on."/>
    <parameter name="platform" description="That type of hardware the bug was experienced on."/>
    <parameter name="priority"
               description="The order the bug will be fixed in by the developer, compared to the developer's other bugs."/>
    <parameter name="severity" description="How severe the bug is."/>
    <parameter name="alias"
               description="A brief alias for the bug that can be used instead of a bug number when accessing this bug."/>
    <parameter name="assignedTo" description="A user to assign this bug to."/>
    <parameter name="cc" description="An array of usernames to CC on this bug."/>
    <parameter name="isCommentPrivate"
               description="If set to true, the description is private, otherwise it is assumed to be public."/>
    <parameter name="isMarkdown"
               description="If set to true, the description has Markdown structures, otherwise it is a normal text."/>
    <parameter name="groups" description="An array of group names to put this bug into."/>
    <parameter name="qaContact"
               description="If this installation has QA Contacts enabled, you can set the QA Contact here."/>
    <parameter name="status" description="The status that this bug should start out as."/>
    <parameter name="resolution"
               description="If you are filing a closed bug, then you will have to specify a resolution."/>
    <parameter name="targetMilestone" description="A valid target milestone for this product."/>
    <parameter name="flags" description="An array of hashes with flags to add to the bug."/>
    <parameter name="customFields"
               description="String value passed for the installed custom field."/>
    <sequence>
        <property name="uri.var.product" expression="$func:product"/>
        <property name="uri.var.component" expression="$func:component"/>
        <property name="uri.var.summary" expression="$func:summary"/>
        <property name="uri.var.version" expression="$func:version"/>
        <property name="uri.var.description" expression="$func:description"/>
        <property name="uri.var.opSys" expression="$func:opSys"/>
        <property name="uri.var.platform" expression="$func:platform"/>
        <property name="uri.var.priority" expression="$func:priority"/>
        <property name="uri.var.severity" expression="$func:severity"/>
        <property name="uri.var.alias" expression="$func:alias"/>
        <property name="uri.var.assignedTo" expression="$func:assignedTo"/>
        <property name="uri.var.cc" expression="$func:cc"/>
        <property name="uri.var.isCommentPrivate" expression="$func:isCommentPrivate"/>
        <property name="uri.var.isMarkdown" expression="$func:isMarkdown"/>
        <property name="uri.var.groups" expression="$func:groups"/>
        <property name="uri.var.qaContact" expression="$func:qaContact"/>
        <property name="uri.var.status" expression="$func:status"/>
        <property name="uri.var.resolution" expression="$func:resolution"/>
        <property name="uri.var.targetMilestone" expression="$func:targetMilestone"/>
        <property name="uri.var.flags" expression="$func:flags"/>
        <property name="uri.var.customFields" expression="$func:customFields"/>
        <payloadFactory media-type="json">
            <format>
                {
                "product":"$1",
                "component":"$2",
                "summary":"$3",
                "version":"$4",
                "op_sys":"$5",
                "platform":"$6",
                "priority":"$7",
                "severity":"$8"
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.product')"/>
                <arg expression="get-property('uri.var.component')"/>
                <arg expression="get-property('uri.var.summary')"/>
                <arg expression="get-property('uri.var.version')"/>
                <arg expression="get-property('uri.var.opSys')"/>
                <arg expression="get-property('uri.var.platform')"/>
                <arg expression="get-property('uri.var.priority')"/>
                <arg expression="get-property('uri.var.severity')"/>
            </args>
        </payloadFactory>
        <script language="js">
            <![CDATA[
           payload = mc.getPayloadJSON();   
           var description=mc.getProperty('uri.var.description');
           var alias = mc.getProperty('uri.var.alias');
           var assignedTo = mc.getProperty('uri.var.assignedTo'); 
           var cc = mc.getProperty('uri.var.cc'); 
           var isCommentPrivate = mc.getProperty('uri.var.isCommentPrivate');
           var isMarkdown = mc.getProperty('uri.var.isMarkdown'); 
           var groups = mc.getProperty('uri.var.groups'); 
		   var qaContact = mc.getProperty('uri.var.qaContact');
           var status = mc.getProperty('uri.var.status'); 
           var resolution = mc.getProperty('uri.var.resolution'); 
           var targetMilestone = mc.getProperty('uri.var.targetMilestone'); 
           var flags = mc.getProperty('uri.var.flags');
		   var customFields = mc.getProperty('uri.var.customFields');
           payload["description"]=description;
           if (alias != null && alias != "") {
              if(alias.charCodeAt(0) != '91' && alias.charCodeAt(alias.length-1) != '93'){
                 payload["alias"]= alias;
              } else {
                 payload["alias"]=eval("(" + alias + ")");
              }
           }     
           if (assignedTo != null && assignedTo != "") {
              payload["assigned_to"]=assignedTo;
           }     
           if (isCommentPrivate != null && isCommentPrivate != "") {
              payload["comment_is_private"]=isCommentPrivate;
           }  
           if (cc != null && cc != "") {
              if(cc.charCodeAt(0) != '91' && cc.charCodeAt(cc.length-1) != '93'){
                 payload["cc"]= cc;
              } else {
                 payload["cc"]=eval("(" + cc + ")");
              }
           }   
           if (isMarkdown != null && isMarkdown != "") {
              payload["is_markdown"]=isMarkdown;
           }    
           if (groups != null && groups != "") {
              if(groups.charCodeAt(0) != '91' && groups.charCodeAt(groups.length-1) != '93'){
                 payload["groups"]= groups;
              } else {
                 payload["groups"]=eval("(" + groups + ")");
             }
          } 
		  if (qaContact != null && qaContact != "") {
             payload["qa_contact"]=qaContact;
          }     
          if (status != null && status != "") {
             payload["status"]=status;
          }     
          if (resolution != null && resolution != "") {
             payload["resolution"]=resolution ;
          }     
          if (targetMilestone != null && targetMilestone != "") {
             payload["target_milestone"]=targetMilestone;
          }    
          if (flags != null && flags != "") {
             payload["flags"]=eval("(" + flags + ")");
          } 
          if (customFields != null && customFields != "") {
             var customFieldsJsonObject=eval("(" + customFields + ")");
             for(var key in customFieldsJsonObject)	{
                payload[key]=customFieldsJsonObject[key];
             }
         }	 
         mc.setPayloadJSON(payload);
        ]]>
        </script>
        <property name="DISABLE_CHUNKING" value="true" scope="axis2"/>
        <call>
            <endpoint>
                <http method="post" uri-template="{uri.var.apiUrl}/bug{+uri.var.apiKey}"/>
            </endpoint>
        </call>
        <!--Removing custom headers from the Response. -->
        <header name="X-frame-options" action="remove" scope="transport"/>
        <header name="X-xss-protection" action="remove" scope="transport"/>
        <header name="Etag" action="remove" scope="transport"/>
        <header name="X-content-type-options" action="remove" scope="transport"/>
        <header name="Access-control-allow-origin" action="remove" scope="transport"/>
        <header name="Access-control-allow-headers" action="remove" scope="transport"/>
    </sequence>
</template>